{"version":3,"sources":["models/NoteModel.jsx","components/AddForm.jsx","components/Note.jsx","components/NotesList.jsx","App.js","serviceWorker.js","index.js"],"names":["NoteModel","id","content","this","AddForm","handleAdd","loadData","useState","form","setForm","className","onSubmit","event","preventDefault","note","shortid","generate","htmlFor","rows","name","value","onChange","eventt","target","required","type","onClick","Note","handleDelete","NotesList","notes","length","map","key","App","axios","get","dataURL","then","response","setState","data","post","delete","state","console","log","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4RAAqBA,EACnB,WAAYC,EAAIC,GAAU,oBACxBC,KAAKF,GAAKA,EACVE,KAAKD,QAAUA,GCgDJE,EA9CC,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,UAAWC,EAAe,EAAfA,SAAe,EACnBC,mBAAS,CAAEL,QAAS,KADD,mBACpCM,EADoC,KAC9BC,EAD8B,KAc3C,OACE,yBAAKC,UAAU,cACb,0BAAMA,UAAU,UAAUC,SART,SAAAC,GACnBA,EAAMC,iBACN,IAAMC,EAAO,IAAId,EAAUe,IAAQC,WAAYR,EAAKN,SACpDG,EAAUS,GACVL,EAAQ,CAAEP,QAAS,OAKf,yBAAKQ,UAAU,SACb,2BAAOO,QAAQ,QAAf,kCACA,yBAAKP,UAAU,YACb,8BACEQ,KAAK,IACLjB,GAAG,OACHkB,KAAK,OACLC,MAAOZ,EAAKN,QACZmB,SAtBS,SAAAC,GAAW,IACtBF,EAAUE,EAAOC,OAAjBH,MACRX,EAAQ,CAAEP,QAASkB,KAqBTI,UAAQ,MAId,4BAAQd,UAAU,YAAYe,KAAK,UAAnC,oDAGA,4BAAQf,UAAU,YAAYe,KAAK,SAASC,QAASpB,GACnD,uBAAGI,UAAU,wBCTRiB,EA3BF,SAAC,GAA4B,IAA1Bb,EAAyB,EAAzBA,KAAMc,EAAmB,EAAnBA,aACpB,OACE,yBAAKlB,UAAU,mBACb,yBAAKA,UAAU,WACb,yBAAKA,UAAU,WACb,yBAAKA,UAAU,eAAeI,EAAKZ,UAErC,4BACEQ,UAAU,4BACVgB,QAAS,kBAAME,EAAad,EAAKb,MAEjC,uBAAGS,UAAU,mBAJf,aCkBOmB,EAxBG,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,MAAOF,EAAmB,EAAnBA,aAC1B,OACE,yBAAKlB,UAAU,oBACb,yBAAKA,UAAU,WACZoB,EAAMC,OACHD,EAAME,KAAI,SAAAlB,GAAI,OACZ,kBAAC,EAAD,CAAMmB,IAAKnB,EAAKb,GAAIa,KAAMA,EAAMc,aAAcA,OAEhD,QCsCGM,E,kDA5Cb,aAAe,IAAD,8BACZ,gBAaF5B,SAAW,WACT6B,IACGC,IAAI,EAAKC,SACTC,MAAK,SAAAC,GAAQ,OAAI,EAAKC,SAAS,CAAEV,MAAOS,EAASE,WAjBxC,EAoBdpC,UAAY,SAAAS,GACVqB,IAAMO,KAAK,EAAKL,QAASvB,GAAMwB,MAAK,kBAAM,EAAKhC,eArBnC,EAwBdsB,aAAe,SAAA3B,GACbkC,IAAMQ,OAAN,UAAgB,EAAKN,QAArB,YAAgCpC,IAAMqC,MAAK,kBAAM,EAAKhC,eAtBtD,EAAKsC,MAAQ,CACXd,MAAO,IAGT,EAAKO,QAAU,qCAPH,E,gEAWZlC,KAAKG,a,+BAmBL,OADAuC,QAAQC,IAAI3C,KAAKyC,MAAMd,OAErB,yBAAKpB,UAAU,OACb,yBAAKA,UAAU,6BACb,kBAAC,EAAD,CAASL,UAAWF,KAAKE,UAAWC,SAAUH,KAAKG,WACnD,kBAAC,EAAD,CACEwB,MAAO3B,KAAKyC,MAAMd,MAClBF,aAAczB,KAAKyB,qB,GArCbmB,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,kB","file":"static/js/main.dd0bd50f.chunk.js","sourcesContent":["export default class NoteModel {\n  constructor(id, content) {\n    this.id = id;\n    this.content = content;\n  }\n}\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport shortid from \"shortid\";\nimport NoteModel from \"../models/NoteModel\";\n\nconst AddForm = ({ handleAdd, loadData }) => {\n  const [form, setForm] = useState({ content: \"\" });\n\n  const handleChange = eventt => {\n    const { value } = eventt.target;\n    setForm({ content: value });\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const note = new NoteModel(shortid.generate(), form.content);\n    handleAdd(note);\n    setForm({ content: \"\" });\n  };\n  return (\n    <div className=\"ui segment\">\n      <form className=\"ui form\" onSubmit={handleSubmit}>\n        <div className=\"field\">\n          <label htmlFor=\"note\">Текст</label>\n          <div className=\"ui input\">\n            <textarea\n              rows=\"3\"\n              id=\"note\"\n              name=\"note\"\n              value={form.content}\n              onChange={handleChange}\n              required\n            />\n          </div>\n        </div>\n        <button className=\"ui button\" type=\"submit\">\n          Добавить\n        </button>\n        <button className=\"ui button\" type=\"button\" onClick={loadData}>\n          <i className=\"redo green icon\"></i>\n        </button>\n      </form>\n    </div>\n  );\n};\n\nAddForm.propTypes = {\n  handleAdd: PropTypes.func.isRequired,\n  loadData: PropTypes.func.isRequired\n};\n\nexport default AddForm;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Note = ({ note, handleDelete }) => {\n  return (\n    <div className=\"six wide column\">\n      <div className=\"ui card\">\n        <div className=\"content\">\n          <div className=\"description\">{note.content}</div>\n        </div>\n        <button\n          className=\"ui bottom attached button\"\n          onClick={() => handleDelete(note.id)}\n        >\n          <i className=\"trash red icon\"></i>\n          Delete\n        </button>\n      </div>\n    </div>\n  );\n};\n\nNote.propTypes = {\n  note: PropTypes.shape({\n    id: PropTypes.number,\n    content: PropTypes.string,\n    handleDelete: PropTypes.func\n  })\n};\n\nexport default Note;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Note from \"./Note\";\n\nconst NotesList = ({ notes, handleDelete }) => {\n  return (\n    <div className=\"ui basic segment\">\n      <div className=\"ui grid\">\n        {notes.length\n          ? notes.map(note => (\n              <Note key={note.id} note={note} handleDelete={handleDelete} />\n            ))\n          : null}\n      </div>\n    </div>\n  );\n};\n\nNotesList.propTypes = {\n  notes: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      content: PropTypes.string.isRequired\n    })\n  ),\n  handleDelete: PropTypes.func.isRequired\n};\n\nexport default NotesList;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport AddForm from \"./components/AddForm\";\nimport NotesList from \"./components/NotesList\";\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      notes: []\n    };\n\n    this.dataURL = \"https://ra-6-2.herokuapp.com/notes\";\n  }\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  loadData = () => {\n    axios\n      .get(this.dataURL)\n      .then(response => this.setState({ notes: response.data }));\n  };\n\n  handleAdd = note => {\n    axios.post(this.dataURL, note).then(() => this.loadData());\n  };\n\n  handleDelete = id => {\n    axios.delete(`${this.dataURL}/${id}`).then(() => this.loadData());\n  };\n\n  render() {\n    console.log(this.state.notes);\n    return (\n      <div className=\"App\">\n        <div className=\"ui text container segment\">\n          <AddForm handleAdd={this.handleAdd} loadData={this.loadData} />\n          <NotesList\n            notes={this.state.notes}\n            handleDelete={this.handleDelete}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}